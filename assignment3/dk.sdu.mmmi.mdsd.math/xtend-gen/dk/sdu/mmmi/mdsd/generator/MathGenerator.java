/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterables;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.External;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.MethodCall;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Pair;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables = new HashMap<String, Integer>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<MathExp> _filter = Iterables.<MathExp>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MathExp.class);
    for (final MathExp e : _filter) {
      String _string = e.getName().toString();
      String _plus = ("math_expression/" + _string);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.compile(e));
    }
  }
  
  private CharSequence compile(final MathExp mathexp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = mathexp.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<VarBinding> _variables = mathexp.getVariables();
      for(final VarBinding exp : _variables) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name_1 = exp.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    {
      int _size = mathexp.getExternals().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("\t");
        _builder.append("private External external");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_2 = mathexp.getName();
        _builder.append(_name_2, "\t");
        _builder.append("(External external) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      EList<VarBinding> _variables_1 = mathexp.getVariables();
      for(final VarBinding exp_1 : _variables_1) {
        _builder.append("\t\t");
        String _name_3 = exp_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(" = ");
        String _computeExpressionString = MathGenerator.computeExpressionString(exp_1.getExpression());
        _builder.append(_computeExpressionString, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      int _size_1 = mathexp.getExternals().size();
      boolean _greaterThan_1 = (_size_1 > 0);
      if (_greaterThan_1) {
        _builder.append("\t");
        _builder.append("interface External {");
        _builder.newLine();
        {
          Iterable<Pair<Integer, External>> _indexed = IterableExtensions.<External>indexed(mathexp.getExternals());
          for(final Pair<Integer, External> external : _indexed) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("public int ");
            String _name_4 = external.getValue().getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("(");
            {
              Iterable<Pair<Integer, String>> _indexed_1 = IterableExtensions.<String>indexed(external.getValue().getTypes());
              boolean _hasElements = false;
              for(final Pair<Integer, String> type : _indexed_1) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(", ", "\t\t");
                }
                String _value = type.getValue();
                _builder.append(_value, "\t\t");
                _builder.append(" n");
                Integer _key = type.getKey();
                _builder.append(_key, "\t\t");
              }
            }
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected static String _computeExpressionString(final VarBinding binding) {
    String value = MathGenerator.computeExpressionString(binding.getExpression());
    return value;
  }
  
  protected static String _computeExpressionString(final MathNumber exp) {
    return Integer.valueOf(exp.getValue()).toString();
  }
  
  protected static String _computeExpressionString(final Plus exp) {
    String _computeExpressionString = MathGenerator.computeExpressionString(exp.getLeft());
    String _plus = (_computeExpressionString + " + ");
    String _computeExpressionString_1 = MathGenerator.computeExpressionString(exp.getRight());
    return (_plus + _computeExpressionString_1);
  }
  
  protected static String _computeExpressionString(final Minus exp) {
    String _computeExpressionString = MathGenerator.computeExpressionString(exp.getLeft());
    String _plus = (_computeExpressionString + " - ");
    String _computeExpressionString_1 = MathGenerator.computeExpressionString(exp.getRight());
    return (_plus + _computeExpressionString_1);
  }
  
  protected static String _computeExpressionString(final Mult exp) {
    String _computeExpressionString = MathGenerator.computeExpressionString(exp.getLeft());
    String _plus = (_computeExpressionString + " * ");
    String _computeExpressionString_1 = MathGenerator.computeExpressionString(exp.getRight());
    return (_plus + _computeExpressionString_1);
  }
  
  protected static String _computeExpressionString(final Div exp) {
    String _computeExpressionString = MathGenerator.computeExpressionString(exp.getLeft());
    String _plus = (_computeExpressionString + " / ");
    String _computeExpressionString_1 = MathGenerator.computeExpressionString(exp.getRight());
    return (_plus + _computeExpressionString_1);
  }
  
  protected static String _computeExpressionString(final VariableUse exp) {
    Binding _ref = exp.getRef();
    if ((_ref instanceof LetBinding)) {
      Binding _ref_1 = exp.getRef();
      return MathGenerator.computeExpressionString(((LetBinding) _ref_1));
    }
    return exp.getRef().getName();
  }
  
  protected static String _computeExpressionString(final Parenthesis exp) {
    String _computeExpressionString = MathGenerator.computeExpressionString(exp.getExpreesion());
    String _plus = ("(" + _computeExpressionString);
    return (_plus + ")");
  }
  
  protected static String _computeExpressionString(final LetBinding exp) {
    return MathGenerator.computeExpressionString(exp.getBody());
  }
  
  private static int counter = 0;
  
  protected static String _computeExpressionString(final MethodCall binding) {
    String _name = binding.getSignature().getName();
    String _plus = (_name + "(");
    final Function1<Expression, String> _function = (Expression e) -> {
      return MathGenerator.computeExpressionString(e);
    };
    String _join = IterableExtensions.join(ListExtensions.<Expression, String>map(binding.getArgs(), _function), ", ");
    String _plus_1 = (_plus + _join);
    return (_plus_1 + ")");
  }
  
  protected static int _computeExpression(final VarBinding binding) {
    MathGenerator.variables.put(binding.getName(), Integer.valueOf(MathGenerator.computeExpression(binding.getExpression())));
    return (MathGenerator.variables.get(binding.getName())).intValue();
  }
  
  protected static int _computeExpression(final MathNumber exp) {
    return exp.getValue();
  }
  
  protected static int _computeExpression(final Plus exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression + _computeExpression_1);
  }
  
  protected static int _computeExpression(final Minus exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression - _computeExpression_1);
  }
  
  protected static int _computeExpression(final Mult exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression * _computeExpression_1);
  }
  
  protected static int _computeExpression(final Div exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression / _computeExpression_1);
  }
  
  protected static int _computeExpression(final LetBinding exp) {
    return MathGenerator.computeExpression(exp.getBody());
  }
  
  protected static int _computeExpression(final VariableUse exp) {
    return MathGenerator.computeBinding(exp.getRef());
  }
  
  protected static int _computeBinding(final VarBinding binding) {
    Integer _xblockexpression = null;
    {
      boolean _containsKey = MathGenerator.variables.containsKey(binding.getName());
      boolean _not = (!_containsKey);
      if (_not) {
        MathGenerator.computeExpression(binding);
      }
      _xblockexpression = MathGenerator.variables.get(binding.getName());
    }
    return (_xblockexpression).intValue();
  }
  
  protected static int _computeBinding(final LetBinding binding) {
    return MathGenerator.computeExpression(binding.getBinding());
  }
  
  public static String computeExpressionString(final EObject exp) {
    if (exp instanceof Div) {
      return _computeExpressionString((Div)exp);
    } else if (exp instanceof LetBinding) {
      return _computeExpressionString((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpressionString((MathNumber)exp);
    } else if (exp instanceof MethodCall) {
      return _computeExpressionString((MethodCall)exp);
    } else if (exp instanceof Minus) {
      return _computeExpressionString((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpressionString((Mult)exp);
    } else if (exp instanceof Parenthesis) {
      return _computeExpressionString((Parenthesis)exp);
    } else if (exp instanceof Plus) {
      return _computeExpressionString((Plus)exp);
    } else if (exp instanceof VarBinding) {
      return _computeExpressionString((VarBinding)exp);
    } else if (exp instanceof VariableUse) {
      return _computeExpressionString((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public static int computeExpression(final EObject exp) {
    if (exp instanceof Div) {
      return _computeExpression((Div)exp);
    } else if (exp instanceof LetBinding) {
      return _computeExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp);
    } else if (exp instanceof VarBinding) {
      return _computeExpression((VarBinding)exp);
    } else if (exp instanceof VariableUse) {
      return _computeExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public static int computeBinding(final Binding binding) {
    if (binding instanceof LetBinding) {
      return _computeBinding((LetBinding)binding);
    } else if (binding instanceof VarBinding) {
      return _computeBinding((VarBinding)binding);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(binding).toString());
    }
  }
}
